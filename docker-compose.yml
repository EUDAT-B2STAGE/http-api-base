version: '3'

# #####################
# VOLUMES
# #####################

volumes:
  jwt_tokens:
    driver: local
  rabbitdata:
    driver: local
  sqldata:
    driver: local
  graphdata:
    driver: local
  mongodata:
    driver: local
  pureftpd:
    driver: local
  # redisdata:
  #   driver: local

# #####################
# NETWORKS
# #####################

networks:
  # default:
  i_net:
  app_net:
  proxy_net:
  db_net:
    # driver: bridge
    ipam:
      driver: default
      config:
        # Note: use this configuration to match inside internal rules
        # TOFIX: make this an env variable
        - subnet: ${DB_SUBNET}/16

# #####################
# SERVICES
# #####################
services:

  ##############################
  # MAIN CONTAINER
  backend:
    # command: sleep infinity
    build: ../builds/apiserver
    # image: apiserver:rapydo
    hostname: restapi
    # user: root
    # working_dir: /code
    environment:
      FLASK_APP: run.py
      VANILLA_PACKAGE: custom
      JWT_APP_SECRETS: ${JWT_APP_SECRETS}
    volumes:
      # Base code
      - ../backend:/code
      # Vanilla code
      - ..:/code/${COMPOSE_PROJECT_NAME}
      # JWT tokens secret
      - jwt_tokens:${JWT_APP_SECRETS}
      # Tests
      - ../tests/backend:/code/test/custom
    networks:
      app_net:
        aliases:
          - ${FLASK_HOST}
      db_net:
      # i_net:

  ##############################
  rabbit:
    image: rabbitmq:latest
    hostname: rabbit
    volumes:
      - rabbitdata:/var/lib/rabbitmq

  worker:
    build: ../builds/celery
    # hostname: celworker
    # command: celery worker -c 1 -A flask_ext.flask_celery.worker.celery_app
    user: root
    working_dir: /code
    environment:
      VANILLA_PACKAGE: custom
      JWT_APP_SECRETS: ${JWT_APP_SECRETS}
    volumes:
      # Base code
      - ../backend:/code
      # JWT tokens secret
      - jwt_tokens:/jwt_tokens

  ##############################
  # The proxy which decides to redirect requests
  # based on URLs received.
  # Redirects /api to backend
  # Listens on port 80
  # Should implements SSL on 443

  proxy:
    # image: nginx:1.11-alpine
    build: ../builds/sslproxy
    # image: nginx:rapydo
    hostname: reverseproxy
    networks:
      proxy_net:
        aliases:
          - ${PROXY_HOST}
      app_net:
    # volumes:
    #   # - ../containers/nginx_proxy:/etc/nginx/conf.d
    #   - ../confs/nginx/production.conf:/etc/nginx/sites-enabled/production
    depends_on:
      # TODO: you have to rewrite all depends_on in a new yml file
      # at the moment they do not cumulate
      - backend

  #############
  # Client interface if using swagger
  swagclient:
    build: ../builds/swaggerui
    # image: swagger-ui:rapydo

  ######################
  sql:
    image: postgres:9.6
    volumes:
      - sqldata:/var/lib/postgresql/data
      - ../builds/postgresql/pgs_init.sh:/docker-entrypoint-initdb.d/setup-my-schema.sh:ro
    environment:
      POSTGRES_USER: "${PLACEHOLDER}"
      POSTGRES_PASSWORD: "${PLACEHOLDER}"
      POSTGRES_DBS: ${PLACEHOLDER}
    networks:
      db_net:
        aliases:
          - ${ALCHEMY_HOST}

  #################################
  graphdb:
    image: neo4j:3.1.3
    volumes:
      - graphdata:/data
    networks:
      db_net:
        aliases:
          - ${GRAPHDB_HOST}
    environment:
      NEO4J_AUTH: neo4j/${PLACEHOLDER}
      # NEO4J_dbms_memory_pagecache_size: 2048M
      # NEO4J_dbms_memory_heap_maxSize: 4096M
    # ports:
    #   - 9090:7474
    #   - 7687:7687

  #################################
  # Mongo DB
  mongodb:
    image: mongo:3.4
    volumes:
      - mongodata:/data/db
    networks:
      db_net:
        aliases:
          - ${MONGO_HOST}

  #################################
  # FTP
  ftp:
    # image: stilliard/pure-ftpd:latest
    build: ../builds/ftp
    volumes:
      - pureftpd:/etc/pure-ftpd/passwd
  # /etc/ssl/private/ A directory containing a single pure-ftpd.pem file
  # with the server's SSL certificates for TLS support. Optional TLS is
  # automatically enabled when the container finds this file on startup.
    environment:
      PUBLICHOST: ${PROJECT_DOMAIN}
      ADDED_FLAGS: -d -d

  #############
  # iRODS iCAT server (usually for EUDAT B2safe)
  icat:
    # B2safe instance on irods
    build: ../builds/b2safe
    # image: b2safe:rapydo
    hostname: ${IRODS_HOST}
    # command: sleep infinity
    environment:
      POSTGRES_HOST: ${PLACEHOLDER}
      POSTGRES_USER: ${PLACEHOLDER}
      POSTGRES_PASSWORD: ${PLACEHOLDER}
      IRODS_HOST: ${PLACEHOLDER}
      IRODS_PORT: ${PLACEHOLDER}
      IRODS_ZONE: ${PLACEHOLDER}
      IRODS_DB: ${PLACEHOLDER}
      IRODS_USER: ${PLACEHOLDER}
      IRODS_PASSWORD: ${PLACEHOLDER}
    networks:
      i_net:
        aliases:
          - ${IRODS_HOST}
      db_net:
    depends_on:
      - sql

  # #################################
  # ADMINISTRATIONS
  # #################################

  #################################
  # Database administration

  # This docker image let you access sqllite/postgres/mysql
  # with a phpmyadmin-like web page
  sqladmin:
    # image: sqladminer:rapydo
    build: ../builds/sqladmin
    # image: eudatb2stage/sqladminer:latest
    networks:
      db_net:

  #############
  # REST API client (wget, curl, httpie, http-prompt)
  client:
    build: ../builds/apiclient
    # image: apiclient:rapydo
    environment:
      MAIN_ENDPOINT: ${API_MAIN_ENDPOINT}
    volumes:
      # TOFIX
      - ../backend:/code/core
      - ..:/code/custom

  # #################################
  # OTHERS
  # #################################

  #######################
  # searchindex:
  #   image: elasticsearch
  #   hostname: elastic
  #   volumes:
  #       - restangulask_graphbased_elasticdata:/usr/share/elasticsearch/data

  #################################
  # SMTP server
  # smtp:
  #   image: namshi/smtp
  #   environment:
  #     # GMAIL_USER: -
  #     # GMAIL_PASSWORD: -
  #     - SMARTHOST_ADDRESS=mail.cineca.it
  #     - SMARTHOST_PORT=587
  #     - SMARTHOST_USER=m.dantonio
  #     - SMARTHOST_PASSWORD=-
  #     - SMARTHOST_ALIASES=*.cineca.it

  #################################
  # REDIS key/value store
  # redqueue:
  #   image: redis:alpine
  #   command: redis-server --appendonly yes
  #   hostname: myqueue
  #   volumes:
  #     - redisdata:/data
