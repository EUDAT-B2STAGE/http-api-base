
GUIDELINES:
- python 3.4 as now (ready for 3.5?)
- flask & plugins
  https://exploreflask.com/organizing.html
  http://mattupstate.com/python/2013/06/26/how-i-structure-my-flask-applications.html
- mock as base service
- relative imports
- other libraries
http://blog.yhathq.com/posts/11-python-libraries-you-might-not-know.html

DESIGN to plan:
  ☐ Configuration
  ☐ Exceptions
    http://flask.pocoo.org/docs/0.10/patterns/apierrors/
  ☐ @Blueprints [and] app @factories
    http://flask-restful.readthedocs.org/en/latest/intermediate-usage.html#use-with-blueprints
    http://flask.pocoo.org/docs/0.10/patterns/appfactories/
  ☐ A valid @PySix [implementation]
    ☐ e.g. jinja2 compat
  ☐ CHECK: Rest as @classmode
    ☐ Flask Classy - https://github.com/apiguy/flask-classy/
    ☐ What about other rest libs http://stackoverflow.com/a/23947463/2114395
  ☐ Tests: noose?
  ☐ Data @validation
    ☐ http://docs.python-cerberus.org/en/latest/
  ☐ Asynchrounous
    ☐ gunicorn
    ☐ twisted https://github.com/cravler/flask-twisted/

TO DO:

 ✔ restful code and test @done (15-09-10 13:14)
 ✔ restful refactoring @done (15-09-10 15:44)
   ✔ package with resources @done (15-09-10 14:52)
   ✔ automatic endpoint @done (15-09-10 15:05)
     ✔ property inside extended resource class @done (15-09-10 15:05)
   ✔ pythonic resource listing from package @done (15-09-10 15:44)
 ✘ abstract Service class @cancelled (15-09-10 14:53)
 ✘ Mock services file @cancelled (15-09-15 11:56)
 ✘ yaml reader @cancelled (15-09-10 14:50)
 ✘ configuration from yaml to rest endpoints @cancelled (15-09-10 14:50)
 ✔ A more extensible mock @done (15-09-25 22:19)
   ✔ method inside ExtendedApiResource to specify a different endpoint @done (15-09-16 13:56)
   ✔ configuration option to specify one or more module file to look for endpoints classes @done (15-09-16 17:25)
     ✔ refactoring @done (15-09-17 14:16)
       ✔ create a configuration module @done (15-09-17 12:11)
       ✔ move metas to Meta class @done (15-09-17 13:15)
       ✔ create Endpoint class for creating resources @done (15-09-17 13:22)
       ✔ rename mock.py in exampleservices.py @done (15-09-17 14:16)
   ✔ get with the key @done (15-09-25 22:19)
   ✔ Decorator module @done (15-09-28 09:52)
     ✔ like flask app? @done (15-09-28 09:52)
     ✔ parameters as module @done (15-09-28 09:52)
   ✔ parameters: parsing @argument @done (15-09-28 19:05)
     ✘ decorat for a class method which also takes arguments is difficult! @cancelled (15-09-28 15:25)
       ✔ solution? @done (15-09-28 19:05)
       http://wrapt.readthedocs.org/en/latest/decorators.html#decorating-instance-methods
       http://scottlobdell.me/2015/04/decorators-arguments-python/
       ☐ decorators order??
     ☐ list
     ☐ also examples of post, put, delete
   ☐ standards for extending restful
   http://flask-restful.readthedocs.org/en/latest/extending.html
 ☐ Blog post
   ☐ ideas, libs, what i will slowly try to reach

TO FIX:
  ✔ logging function (see irods2graph) @done (15-09-25 22:19)
  ✔ cors @done (15-09-11 12:46)
  ✔ logging @done (15-09-11 11:07)
  ✔ Define range ports @done (15-09-15 14:35)
    ✔ https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers @done (15-09-15 14:35)
    ✔ 8081-8089 @done (15-09-15 14:35)
  ✔ standard return values @done (15-09-16 10:39)
    ✔ json dumps @done (15-09-16 10:39)
  ✔ Decorate all methods in a class with a decorator @cool @done (15-09-26 12:42)
  ✔ changelog? @done (15-09-26 15:45)
    ✘ https://github.com/skywinder/github-changelog-generator @cancelled (15-09-26 15:45)
  ☐ relative imports
    https://exploreflask.com/conventions.html#relative-imports
    ☐ does not work with 'import .something'! Only with 'from .somewhere import something' ...!?
  ☐ add to project some @libraries
    ☐ https://github.com/danrobinson/tracestack
      from tracestack import trace
      >>> @trace
      >>> def divide_by_zero():
      ...     1 / 0
